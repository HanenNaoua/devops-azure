trigger:
- main

pool:
  name: default
  
variables:
  resourceGroupName: 'rg-angular-app'
  aksClusterName: 'aks-cluster'
  location: 'westeurope'

stages:

# üî® STAGE 1: BUILD  + PUSH IMAGE
- stage: Build
  displayName: "Build Angular App & Docker Image"
  jobs:
  - job: BuildJob
    steps:

    # Checkout code
    - checkout: self
      clean: true
      fetchDepth: 0
      
    # V√©rifier package.json
    - script: |
        if [ ! -f "$(Build.SourcesDirectory)/angular-app-kubernetes/package.json" ]; then
          echo "‚ùå Erreur: package.json introuvable !"
          exit 1
        fi
      displayName: "V√©rifier l'existence de package.json"
      
    # Node.js
    - task: UseNode@1
      inputs:
        version: '20.x'
      displayName: 'Use Node.js 20'

    # Installer CLI, puppeteer et d√©pendances
    - script: |
        cd angular-app-kubernetes
        npm install -g @angular/cli@16
        npm install --legacy-peer-deps
        npm install puppeteer karma-junit-reporter --save-dev
      displayName: "Installer d√©pendances + Puppeteer"

    # Build Angular
    - script: |
        cd angular-app-kubernetes
        export NODE_OPTIONS=--openssl-legacy-provider
        npm run build -- --configuration=production
      displayName: 'Build Angular Project'

    # V√©rifier build output
    - script: |
        ls -l angular-app-kubernetes/dist/angular-app || (echo "‚ùå Build non g√©n√©r√© !" && exit 1)
      displayName: "V√©rifier le dossier dist/"

    # Publier artefact
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'angular-app-kubernetes/dist/angular-app'
        artifactName: 'angular-app-artifact'
        publishLocation: 'Container'
      displayName: 'Publier artefact'

    # Docker login
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'DockerHub-Connection'
      displayName: 'Login to Docker Hub'

    # Docker build & push
    #- task: Docker@2
     # inputs:
      #  command: 'buildAndPush'
       # containerRegistry: 'DockerHub-Connection'
        #repository: 'hanen90/devops-azure'
        #Dockerfile: 'angular-app-kubernetes/Dockerfile'
        #tags: |
         # latest
      #displayName: 'Build and Push Docker Image'
      
    # V√©rification que l‚Äôimage Docker a bien √©t√© cr√©√©e**
    - script: |
        echo " V√©rification des images Docker disponibles"
        docker images | grep "hanen90/devops-azure" || (echo " Image non trouv√©e, v√©rifiez Docker Hub !" && exit 1)
      displayName: "Verify Docker Image"
  
- stage: Test
  displayName: "üß™ Run Unit Tests & Quality Checks"
  dependsOn: Build
  jobs:
    - job: TestJob
      steps:
        - checkout: self

        - task: UseNode@1
          inputs:
            version: '20.x'
          # Test unitaire
        - script: |
            cd angular-app-kubernetes
            npm install --legacy-peer-deps
            npm install puppeteer karma-junit-reporter --save-dev
            export CHROME_BIN=$(node -e "console.log(require('puppeteer').executablePath())")
            export NODE_OPTIONS=--openssl-legacy-provider
            npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
          displayName: "Run Unit Tests"
              
          # Publier r√©sultats de test
        - task: PublishTestResults@2
          inputs:
            testResultsFiles: 'srctest-results/TEST-results.xml'
            testRunTitle: 'R√©sultats des tests frontend'
          condition: always()
          # Pr√©parer l‚Äôanalyse SonarCloud
        - task: SonarCloudPrepare@3
          inputs:
            SonarCloud: 'SonarCloudServiceConnection'
            organization: 'hanennaoua'
            projectKey: 'hanennaoua_azure-devops'
            projectName: 'azure-devops'
            scannerMode: 'CLI'
            extraProperties: |
              sonar.projectKey=hanennaoua_azure-devops
              sonar.organization=hanennaoua
              sonar.host.url=https://sonarcloud.io
              sonar.sources= .
          displayName: 'Pr√©parer l‚Äôanalyse SonarCloud'
          # Ex√©cuter l'analyse SonarCloud
        - task: SonarCloudAnalyze@3
          displayName: 'Run SonarCloud Analysis'

  # üåê STAGE 3: Deploy AKS Cluster with Terraform
- stage: Terraform
  displayName: "üåê Provision AKS with Terraform"
  jobs:
    - job: TerraformJob
      steps:
        - checkout: self
        - script: |
            echo "V√©rification de Terraform install√© dans l‚Äôagent"
            terraform --version
          displayName: 'Check Terraform Installation'
        - script: terraform --version
          displayName: "Check Terraform Version"
        - script: |
            ls -l /usr/bin/terraform
            /usr/bin/terraform --version
          displayName: 'Test Terraform executable'
        - task: TerraformTaskV4@4
          displayName: 'Terraform Init using Managed Identity'
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'Terraform-cnx'
            backendAzureRmResourceGroupName: 'cloud-shell-storage-westeurope'
            backendAzureRmStorageAccountName: 'csb10032004c27f8b63'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'terraform.tfstate'
            workingDirectory: '$(System.DefaultWorkingDirectory)/angular-app-kubernetes/terraform'
        - task: TerraformTaskV4@4
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/angular-app-kubernetes/terraform'
            environmentServiceNameAzureRM: 'Terraform-cnx'
        - task: TerraformTaskV4@4
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/angular-app-kubernetes/terraform'
            environmentServiceNameAzureRM: 'Terraform-cnx'
            additionalArgs: '-auto-approve'
  
  # üìä STAGE 4: MONITORING
- stage: Monitoring
  displayName: "üìä Install Prometheus & Grafana"
  dependsOn: Terraform
  jobs:
    - job: MonitoringJob
      steps:
        - checkout: self
        - task: AzureCLI@2
          displayName: "Get AKS Credentials"
          inputs:
            azureSubscription: 'Terraform-cnx'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
        - script: |
            echo "üéØ V√©rification Helm local"
            helm version
          displayName: "Check Helm version"

        - script: |
            echo "‚û°Ô∏è Adding Helm repos..."
            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
            helm repo add grafana https://grafana.github.io/helm-charts
            helm repo update
            echo "Cr√©ation du namespace monitoring..."
            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
            echo "üì¶ Installing Prometheus..."
            helm install prometheus prometheus-community/prometheus --namespace monitoring
            echo "üìä Installing Grafana..."
            helm install grafana grafana/grafana --set adminPassword='Admin123!' --set service.type=LoadBalancer --namespace monitoring
            echo "‚úÖ Monitoring stack installed!"
          displayName: "Install Prometheus & Grafana"

        - script: |
            echo "‚úÖ V√©rification des pods dans le namespace monitoring"
            kubectl get pods -n monitoring
          displayName: "Check running pods"
