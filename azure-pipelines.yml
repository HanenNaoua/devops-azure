trigger:
- main

pool:
  name: default

stages:

# üî® STAGE 1: BUILD + TEST + PUSH IMAGE
- stage: Build
  displayName: "Build and Test Stage"
  jobs:
  - job: BuildJob
    displayName: "Build Angular App, Test, Dockerize"
    steps:

    # Checkout code
    - checkout: self
      clean: true

    # V√©rifier package.json
    - script: |
        if [ ! -f "$(Build.SourcesDirectory)/angular-app-kubernetes/package.json" ]; then
          echo "‚ùå Erreur: package.json introuvable !"
          exit 1
        fi
      displayName: "V√©rifier l'existence de package.json"
      
    # Node.js
    - task: UseNode@1
      inputs:
        version: '20.x'
      displayName: 'Use Node.js 20'

    # Installer CLI, puppeteer et d√©pendances
    - script: |
        cd angular-app-kubernetes
        npm install -g @angular/cli@16
        npm install --legacy-peer-deps
        npm install puppeteer karma-junit-reporter --save-dev
      displayName: "Installer d√©pendances + Puppeteer"

    # Build Angular
    - script: |
        cd angular-app-kubernetes
        export NODE_OPTIONS=--openssl-legacy-provider
        npm run build -- --configuration=production
      displayName: 'Build Angular Project'
    # Test unitaire
    - script: |
        cd angular-app-kubernetes
        export CHROME_BIN=$(node -e "console.log(require('puppeteer').executablePath())")
        export NODE_OPTIONS=--openssl-legacy-provider
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      displayName: "Ex√©cuter les tests unitaires"

    # Publier r√©sultats de test
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-results/**/*.xml'
        testRunTitle: 'R√©sultats des tests frontend'
      condition: always()
    # V√©rifier build output
    - script: |
        ls -l angular-app-kubernetes/dist/angular-app || (echo "‚ùå Build non g√©n√©r√© !" && exit 1)
      displayName: "V√©rifier le dossier dist/"

    # Publier artefact
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: 'angular-app-kubernetes/dist/angular-app'
        artifactName: 'angular-app-artifact'
        publishLocation: 'Container'
      displayName: 'Publier artefact'

    # Docker login
    - task: Docker@2
      inputs:
        command: 'login'
        containerRegistry: 'DockerHub-Connection'
      displayName: 'Login to Docker Hub'

    # Docker build & push
    #- task: Docker@2
     # inputs:
      #  command: 'buildAndPush'
       # containerRegistry: 'DockerHub-Connection'
        #repository: 'hanen90/devops-azure'
        #Dockerfile: 'angular-app-kubernetes/Dockerfile'
        #tags: |
         # latest
      #displayName: 'Build and Push Docker Image'
# üöÄ STAGE 2: DEPLOY TO AKS
- stage: Deploy
  displayName: "Deploy to AKS"
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: DeployJob
    displayName: "Kubernetes Deployment"
    steps:
    # T√©l√©charger artefact si besoin
    - download: current
      artifact: angular-app-artifact
    # Azure login
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'azure'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üîê Connexion √† Azure"
          az aks get-credentials --resource-group MYGR --name myAKSCluster --overwrite-existing
          echo "üöÄ D√©ploiement Kubernetes"
          kubectl apply -f deploy/deployment.yaml
          #kubectl apply -f angular-app-kubernetes/k8s/service.yaml
      displayName: "D√©ployer sur AKS"
