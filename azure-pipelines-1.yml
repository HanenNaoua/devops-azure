trigger:
- main

pool:
  name: default  # Vérifie que ce pool contient un agent compatible avec Java, Docker et SonarCloud

steps:

# 1️⃣ Checkout du code
- checkout: self
  clean: true
  persistCredentials: true

# 2️⃣ Vérifier l'existence de package.json
- script: |
    if [ ! -f "$(Build.SourcesDirectory)/angular-app-kubernetes/package.json" ]; then
      echo "❌ Erreur: package.json introuvable !"
      exit 1
    fi
  displayName: "Vérifier l'existence de package.json"

# 3️⃣ Installer Node.js 20
- task: UseNode@1
  inputs:
    version: '20.x'
  displayName: 'Use Node.js 20'

# 4️⃣ Installer Angular CLI et les dépendances
- script: |
    echo "📦 Installation de Angular CLI et des dépendances"
    cd $(Build.SourcesDirectory)/angular-app-kubernetes
    npm install -g @angular/cli@16
    npm install --legacy-peer-deps
    ng version
  displayName: 'Install Angular CLI and dependencies'

# 5️⃣ 🔍 **Préparer l'analyse SonarCloud**

# 6️⃣ 🚀 Build du projet Angular
- script: |
    echo "🚀 Build du projet Angular"
    cd $(Build.SourcesDirectory)/angular-app-kubernetes
    export NODE_OPTIONS=--openssl-legacy-provider
    npm run build -- --configuration=production
  displayName: 'Build Angular Project'

  # 📌 Étape 10 : Exécuter les tests unitaires
- script: |
    echo "🧪 Exécution des tests"
    cd $(Build.SourcesDirectory)/angular-app-kubernetes
    npm install --legacy-peer-deps
    npm run test
  displayName: 'Exécuter les tests unitaires'
  workingDirectory: $(System.DefaultWorkingDirectory)

  # 📌 Étape 11 : Publier les résultats des tests
- task: PublishTestResults@2
  inputs:
    testResultsFiles: 'srctest-results/TEST-results.xml'  # ← ajuste ce chemin si besoin
    testRunTitle: 'Résultats des tests du frontend'
    mergeTestResults: true
    failTaskOnFailedTests: true
  condition: always()
  displayName: 'Publier les résultats des tests'

# 7️⃣** Vérifier que le dossier dist/ a bien été généré**
- script: |
    echo " Vérification du dossier dist après build"
    ls -l $(Build.SourcesDirectory)/angular-app-kubernetes/dist/angular-app || (echo " 
    Dossier dist/angular-app non trouvé !" && exit 1)
  displayName: "Verify Angular Build Output"
# 8️⃣** Publier l'artefact du build Angular**
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.SourcesDirectory)/angular-app-kubernetes/dist/angular-app'
    artifactName: 'angular-app-artifact'
    publishLocation: 'Container'
  displayName: 'Publish Build Artifact'

# 5️⃣ 🔍 Exécuter l'analyse SonarCloud

# 6️⃣ 📢 Publier le rapport SonarCloud


# 6️⃣ 🔐 Connexion à Docker Hub
- task: Docker@2
  inputs:
    command: 'login'
    containerRegistry: 'DockerHub-Connection'  # Vérifie que ce nom est exactement celui configuré dans Azure DevOps
  displayName: 'Login to Docker Hub'

# 6️⃣ 🐳 Build & Push Docker Image to Docker Hub
- task: Docker@2
  inputs:
    command: 'buildAndPush'
    containerRegistry: 'DockerHub'  # le même que juste avant
    repository: 'hanen90/devops-azure'  # DockerHub username/repository
    tags: 'latest'
    Dockerfile: 'angular-app-kubernetes/Dockerfile'
  displayName: 'Build and Push Docker Image to Docker Hub'

# 1⃣4⃣**🛠 Vérification que l’image Docker a bien été créée**
- script: |
    echo " Vérification des images Docker disponibles"
    docker images | grep "hanen90/devops-azure" || (echo " Image non trouvée, vérifiez Docker Hub !" && exit 1)
  displayName: "Verify Docker Image"
