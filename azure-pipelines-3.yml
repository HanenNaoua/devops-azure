trigger:
  - main

pool:
  name: Default

variables:
  resourceGroupName: 'rg-angular-app'
  aksClusterName: 'aks-cluster'
  location: 'westeurope'

stages:

# üåê STAGE 1 : Terraform - Provisionne le cluster AKS
- stage: Terraform
  displayName: "Terraform Deployment Stage"
  jobs:
  - job: TerraformJob
    displayName: "Deploy AKS Cluster with Terraform"
    steps:
    - checkout: self
    - script: |
        echo "V√©rification de Terraform install√© dans l‚Äôagent"
        terraform --version
      displayName: 'Check Terraform Installation'
    - script: terraform --version
      displayName: "Check Terraform Version"
    - script: |
        ls -l /usr/bin/terraform
        /usr/bin/terraform --version
      displayName: 'Test Terraform executable'
    - task: TerraformTaskV4@4
      displayName: 'Terraform Init using Managed Identity'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Terraform-cnx'
        backendAzureRmResourceGroupName: 'cloud-shell-storage-westeurope'
        backendAzureRmStorageAccountName: 'csb10032004c27f8b63'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/angular-app-kubernetes/terraform'
    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/angular-app-kubernetes/terraform'
        environmentServiceNameAzureRM: 'Terraform-cnx'
    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/angular-app-kubernetes/terraform'
        environmentServiceNameAzureRM: 'Terraform-cnx'
        additionalArgs: '-auto-approve'

# üìä STAGE 2 : Monitoring - Installe Prometheus & Grafana avec Helm
- stage: Monitoring
  displayName: "Install Prometheus & Grafana"
  jobs:
  - job: InstallMonitoring
    displayName: "Install Prometheus and Grafana"
    steps:
    - checkout: self
    - task: AzureCLI@2
      displayName: "Get AKS Credentials"
      inputs:
        azureSubscription: 'Terraform-cnx'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing
    - script: |
        echo "üì• Installation de Helm..."
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        helm version
      displayName: "Install Helm"
    - script: |
        echo "‚û°Ô∏è Adding Helm repos..."
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

        echo "Cr√©ation du namespace monitoring..."
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

        echo "üì¶ Installing Prometheus..."
        #helm install prometheus prometheus-community/prometheus
        helm install prometheus prometheus-community/prometheus --namespace monitoring


        echo "üìä Installing Grafana..."
        #helm upgrade --install grafana grafana/grafana --namespace monitoring
        helm install grafana grafana/grafana --set adminPassword='Admin123!' --set service.type=LoadBalancer --namespace monitoring

        echo "‚úÖ Monitoring stack installed!"
      displayName: "Install Prometheus & Grafana"

    - script: |
        echo "‚úÖ V√©rification des pods dans le namespace monitoring"
        kubectl get pods -n monitoring
        displayName: "Check running pods"
