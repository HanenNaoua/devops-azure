trigger:
  - main

pool:
  name: Default
 # demands:
  #  - Agent.Name -equals AgentSelfHostedDevops

variables:
  resourceGroupName: 'rg-angular-app'
  aksClusterName: 'aks-cluster'
  location: 'westeurope'

stages:

# üåê STAGE 1 : Terraform - Provisionne le cluster AKS
- stage: Terraform
  displayName: "Terraform Deployment Stage"
  jobs:
  - job: TerraformJob
    displayName: "Deploy AKS Cluster with Terraform"
    steps:
    - checkout: self

    - script: terraform --version
      displayName: "Check Terraform Version"

    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Terraform-MI'
        backendAzureRmResourceGroupName: 'cloud-shell-storage-westeurope'
        backendAzureRmStorageAccountName: 'csb1003200318d650c5'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        environmentServiceNameAzureRM: 'Terraform-MI'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

    - task: TerraformTaskV4@4
      displayName: "Terraform Apply"
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'Terraform-MI'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        additionalArgs: '-auto-approve'


# üìä STAGE 2 : Monitoring - Installe Prometheus & Grafana avec Helm
- stage: Monitoring
  displayName: "Install Prometheus & Grafana"
  dependsOn: Terraform
  jobs:
  - job: InstallMonitoring
    displayName: "Install Prometheus and Grafana"
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: "Get AKS Credentials"
      inputs:
        azureSubscription: 'Terraform-MI'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing

    - script: |
        echo "‚û°Ô∏è Adding Helm repos..."
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update

        echo "üì¶ Installing Prometheus..."
        helm install prometheus prometheus-community/prometheus

        echo "üìä Installing Grafana..."
        helm install grafana grafana/grafana \
          --set adminPassword='Admin123!' \
          --set service.type=LoadBalancer

        echo "‚úÖ Monitoring stack installed!"
      displayName: "Install Prometheus & Grafana"
